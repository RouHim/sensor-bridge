name: CI/CD
on:
  push:
  pull_request:
    types:
      - opened
  workflow_dispatch: # allow manual execution

jobs:

  check-repo:
    name: Check git repository
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  check-code-style:
    name: Check code style
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Check the code style
        run: cd src-tauri && cargo fmt --all -- --check

  check-code:
    name: Check rust code
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install tauri dependencies
        run: sudo apt update && sudo apt install -y libwebkit2gtk-4.0-dev build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install clang linux
        run: sudo apt update && sudo apt install -y clang

      - name: Install lm sensors dependencies
        run: sudo apt update && sudo apt install -y libsensors4-dev

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Verify code
        run: cd src-tauri && cargo clippy

  check-unused-dependencies:
    name: Check for unused deps
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: install dependencies
        run: sudo apt update  && sudo apt install -y libwebkit2gtk-4.0-dev build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install clang linux
        run: sudo apt update && sudo apt install -y clang

      - name: Install lm sensors dependencies
        run: sudo apt update && sudo apt install -y libsensors4-dev

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - uses: cargo-bins/cargo-binstall@main
      - name: Install cargo-udeps
        run: cargo binstall --no-confirm --force cargo-udeps

      - name: Analyze dependencies
        run: cd src-tauri && cargo update && cargo +nightly udeps

  test:
    name: Run application tests
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install tauri dependencies
        run: sudo apt update && sudo apt install -y libwebkit2gtk-4.0-dev build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install clang linux
        run: sudo apt update && sudo apt install -y clang

      - name: Install lm sensors dependencies
        run: sudo apt update && sudo apt install -y libsensors4-dev

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Test code
        run: cd src-tauri && cargo test

  create-release:
    name: Create new release
    needs: [ check-repo, check-code-style, check-code, test ]
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install Dependencies
        run: |
          npm install -g \
             semantic-release  \
            @semantic-release/git  \
            @semantic-release/github  \
            @semantic-release/changelog  \
            @semantic-release/exec \
            @semantic-release/commit-analyzer \
            conventional-changelog-conventionalcommits

      - name: Generate Semantic Release Notes and Create Release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: npx semantic-release -vv

      - name: Delete old releases
        uses: dev-drprasad/delete-older-releases@v0.2.1
        with:
          keep_latest: 5
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  bundle-and-upload:
    needs: [ create-release ]
    name: Bundle and upload application artifacts
    strategy:
      fail-fast: false
      matrix:
        platform: [ ubuntu-20.04, windows-latest ]
    runs-on: ${{ matrix.platform }}
    env:
      REPO_OWNER: RouHim
      REPO_NAME: sensor-bridge
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Set version to environment
        shell: bash
        run: |
          REPO="RouHim/sensor-bridge"
          LATEST_RELEASE_VERSION=$(curl --silent "https://api.github.com/repos/$REPO/releases/latest" | jq -r ".tag_name")
          LATEST_RELEASE_VERSION=${LATEST_RELEASE_VERSION#v}
          echo "Latest release is $LATEST_RELEASE_VERSION"
          echo "VERSION=$LATEST_RELEASE_VERSION" >> $GITHUB_ENV

      - name: Set version
        shell: bash
        run: |
          cd src-tauri
          jq --arg new_version "${{ env.VERSION }}" '.package.version = $new_version' tauri.conf.json > tmp.json && mv tmp.json tauri.conf.json
          echo "Tauri version is now: $(cat tauri.conf.json | jq ".package.version")"
          sed -i "s/version = \"0.0.0\"/version = \"${{ env.VERSION }}\"/g" Cargo.toml
          echo "Cargo version is now" $(cargo metadata --no-deps --format-version 1 | jq -r ".packages[0].version")
          cd ..

      - name: Install Tauri dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: sudo apt update && sudo apt install -y libwebkit2gtk-4.0-dev build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install clang windows
        if: matrix.platform == 'windows-latest'
        run: choco install -y visualstudio2022-workload-nativedesktop

      - name: Install clang linux
        if: matrix.platform == 'ubuntu-20.04'
        run: sudo apt update && sudo apt install -y clang

      - name: Install lm sensors dependencies
        if: matrix.platform == 'ubuntu-20.04'
        run: sudo apt update && sudo apt install -y libsensors4-dev

      - uses: cargo-bins/cargo-binstall@main
      - name: Install Tauri-CLI
        run: cargo binstall --no-confirm --force tauri-cli

      - name: Build the app
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: cargo tauri build

      - name: Upload linux AppImage
        if: matrix.platform == 'ubuntu-20.04'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          .github/helper/upload-github-release-asset.sh \
            github_api_token=$GITHUB_TOKEN \
            owner=${{ env.REPO_OWNER }} \
            repo=${{ env.REPO_NAME }} \
            tag=v${{ env.VERSION }} \
            filepath=src-tauri/target/release/bundle/appimage/sensor-bridge_${{ env.VERSION }}_amd64.AppImage \
            filename=sensor-bridge_${{ env.VERSION }}_amd64.AppImage

      - name: Upload linux AppImage updater
        if: matrix.platform == 'ubuntu-20.04'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          .github/helper/upload-github-release-asset.sh \
            github_api_token=$GITHUB_TOKEN \
            owner=${{ env.REPO_OWNER }} \
            repo=${{ env.REPO_NAME }} \
            tag=v${{ env.VERSION }} \
            filepath=src-tauri/target/release/bundle/appimage/sensor-bridge_${{ env.VERSION }}_amd64.AppImage.tar.gz \
            filename=sensor-bridge_${{ env.VERSION }}_amd64.AppImage.tar.gz

      - name: Upload linux AppImage updater signature
        if: matrix.platform == 'ubuntu-20.04'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          .github/helper/upload-github-release-asset.sh \
            github_api_token=$GITHUB_TOKEN \
            owner=${{ env.REPO_OWNER }} \
            repo=${{ env.REPO_NAME }} \
            tag=v${{ env.VERSION }} \
            filepath=src-tauri/target/release/bundle/appimage/sensor-bridge_${{ env.VERSION }}_amd64.AppImage.tar.gz.sig \
            filename=sensor-bridge_${{ env.VERSION }}_amd64.AppImage.tar.gz.sig

      - name: Upload windows installer
        if: matrix.platform == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          .github/helper/upload-github-release-asset.sh \
            github_api_token=$GITHUB_TOKEN \
            owner=${{ env.REPO_OWNER }} \
            repo=${{ env.REPO_NAME }} \
            tag=v${{ env.VERSION }} \
            filepath=src-tauri/target/release/bundle/msi/sensor-bridge_${{ env.VERSION }}_x64_en-US.msi \
            filename=sensor-bridge_${{ env.VERSION }}_x64_en-US.msi

      - name: Upload windows updater
        if: matrix.platform == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          .github/helper/upload-github-release-asset.sh \
            github_api_token=$GITHUB_TOKEN \
            owner=${{ env.REPO_OWNER }} \
            repo=${{ env.REPO_NAME }} \
            tag=v${{ env.VERSION }} \
            filepath=src-tauri/target/release/bundle/msi/sensor-bridge_${{ env.VERSION }}_x64_en-US.msi.zip \
            filename=sensor-bridge_${{ env.VERSION }}_x64_en-US.msi.zip

      - name: Upload windows updater signature
        if: matrix.platform == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          .github/helper/upload-github-release-asset.sh \
            github_api_token=$GITHUB_TOKEN \
            owner=${{ env.REPO_OWNER }} \
            repo=${{ env.REPO_NAME }} \
            tag=v${{ env.VERSION }} \
            filepath=src-tauri/target/release/bundle/msi/sensor-bridge_${{ env.VERSION }}_x64_en-US.msi.zip.sig \
            filename=sensor-bridge_${{ env.VERSION }}_x64_en-US.msi.zip.sig

  update-updater:
    name: Update updater
    needs: [ bundle-and-upload ]
    runs-on: ubuntu-22.04
    env:
      UPDATER_FILE: ".github/updater/sensorbridge_update.json"
    steps:
      - uses: actions/checkout@v4

      - name: Set version to environment
        shell: bash
        run: |
          REPO="RouHim/sensor-bridge"
          LATEST_RELEASE_VERSION=$(curl --silent "https://api.github.com/repos/$REPO/releases/latest" | jq -r ".tag_name")
          LATEST_RELEASE_VERSION=${LATEST_RELEASE_VERSION#v}
          echo "Latest release is $LATEST_RELEASE_VERSION"
          echo "VERSION=$LATEST_RELEASE_VERSION" >> $GITHUB_ENV

      - name: Build updater json
        run: bash .github/updater/build_update_json.sh "${{ env.VERSION }}" "${{ env.UPDATER_FILE }}"

      - name: Deploy update information to gist
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          gist_id: 4c3d1cf64150dac63d6cfdab2fce306d
          file_path: ${{ env.UPDATER_FILE }}